{"ast":null,"code":"var _jsxFileName = \"/Users/akshith/Documents/GitHub/Stocks-app/stocks-app/src/pages/Stocks.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport StockCard from '../components/Stock_card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StocksPage = () => {\n  _s();\n  const [stocks, setStocks] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const stocksPerPage = 30;\n\n  // Fetch stock data and update state\n  useEffect(() => {\n    // Fetch stock data from your API and update the stocks state\n    // Make sure to include any necessary pagination parameters\n    // For example, you can pass currentPage and stocksPerPage to the API\n\n    // Replace this with your API call\n    const fetchStocks = async () => {\n      try {\n        const response = await fetch(`/api/stocks?page=${currentPage}&limit=${stocksPerPage}`);\n        const data = await response.json();\n        setStocks(data.stocks);\n      } catch (error) {\n        console.error('Error fetching stock data:', error);\n      }\n    };\n    fetchStocks();\n  }, [currentPage]);\n\n  // Calculate the total number of pages based on the available stocks\n  const totalPages = Math.ceil(stocks.length / stocksPerPage);\n\n  // Handle pagination\n  const goToPage = page => {\n    setCurrentPage(page);\n  };\n\n  // Calculate the index range for the current page\n  const indexOfLastStock = currentPage * stocksPerPage;\n  const indexOfFirstStock = indexOfLastStock - stocksPerPage;\n  const currentStocks = stocks.slice(indexOfFirstStock, indexOfLastStock);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stock-cards\",\n      children: currentStocks.map(stock => /*#__PURE__*/_jsxDEV(StockCard, {\n        stock: stock\n      }, stock.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: Array.from({\n        length: totalPages\n      }, (_, index) => index + 1).map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => goToPage(page),\n        children: page\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(StocksPage, \"S4OgbUyPCy/JOHCGZEm0nmiMAKo=\");\n_c = StocksPage;\nexport default StocksPage;\nvar _c;\n$RefreshReg$(_c, \"StocksPage\");","map":{"version":3,"names":["React","useState","useEffect","StockCard","jsxDEV","_jsxDEV","StocksPage","_s","stocks","setStocks","currentPage","setCurrentPage","stocksPerPage","fetchStocks","response","fetch","data","json","error","console","totalPages","Math","ceil","length","goToPage","page","indexOfLastStock","indexOfFirstStock","currentStocks","slice","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","stock","id","Array","from","_","index","onClick","_c","$RefreshReg$"],"sources":["/Users/akshith/Documents/GitHub/Stocks-app/stocks-app/src/pages/Stocks.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport StockCard from '../components/Stock_card';\n\nconst StocksPage = () => {\n  const [stocks, setStocks] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const stocksPerPage = 30;\n\n  // Fetch stock data and update state\n  useEffect(() => {\n    // Fetch stock data from your API and update the stocks state\n    // Make sure to include any necessary pagination parameters\n    // For example, you can pass currentPage and stocksPerPage to the API\n\n    // Replace this with your API call\n    const fetchStocks = async () => {\n      try {\n        const response = await fetch(`/api/stocks?page=${currentPage}&limit=${stocksPerPage}`);\n        const data = await response.json();\n        setStocks(data.stocks);\n      } catch (error) {\n        console.error('Error fetching stock data:', error);\n      }\n    };\n\n    fetchStocks();\n  }, [currentPage]);\n\n  // Calculate the total number of pages based on the available stocks\n  const totalPages = Math.ceil(stocks.length / stocksPerPage);\n\n  // Handle pagination\n  const goToPage = (page) => {\n    setCurrentPage(page);\n  };\n\n  // Calculate the index range for the current page\n  const indexOfLastStock = currentPage * stocksPerPage;\n  const indexOfFirstStock = indexOfLastStock - stocksPerPage;\n  const currentStocks = stocks.slice(indexOfFirstStock, indexOfLastStock);\n\n  return (\n    <div>\n      {/* Render your navbar component here */}\n      <div className=\"search-bar\">\n        {/* Render your search bar component here */}\n      </div>\n      <div className=\"stock-cards\">\n        {currentStocks.map((stock) => (\n          <StockCard key={stock.id} stock={stock} />\n        ))}\n      </div>\n      <div className=\"pagination\">\n        {Array.from({ length: totalPages }, (_, index) => index + 1).map((page) => (\n          <button key={page} onClick={() => goToPage(page)}>\n            {page}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default StocksPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}